#!/bin/bash

#script to be executed when starting the container
#script is run as $DEVCON_USER
USER_PASSWORD=passw0rd

if [[ -v DEVCON_USER_PASSWORD ]]; then
  #use env variable to change root password
  USER_PASSWORD=$DEVCON_USER_PASSWORD
fi 

if [ "$DEVCON_RANDOM_USER_PASSWORD" = "true" ]; then
  #use env variable to change root password
  USER_PASSWORD=$(date +%s | sha256sum | base64 | head -c 15)
  DEVCON_DISPLAY_PASSWORD=true
fi 
#echo "$DEVCON_USER:$USER_PASSWORD" > password.txt

echo "$DEVCON_USER:$USER_PASSWORD" | sudo chpasswd

#create devcon-tool completion script
__devconcommands=$(devcon-tool |grep "^  " | awk '{print $1}' | tr '\n' ' ')
cat > /tmp/devcon-completion.sh << EOF
#/usr/bin/env bash
complete -W "${__devconcommands}" devcon-tool
EOF
sudo mv /tmp/devcon-completion.sh /etc/bash_completion.d/devcon-completion.sh 
sudo chown root:root /etc/bash_completion.d/devcon-completion.sh 
sudo chmod 755 /etc/bash_completion.d/devcon-completion.sh 

#create directories
#map /devcon/host to some container in host machine
#tmux resurrect file is in this directory
mkdir -p ~/host/.devcon/config/tmux/
  
#start SSH daemon if not told to not 
__sshd_status=""
if [ "$DEVCON_START_SSHD" = "false" ]; then
  __sshd_status="disabled"
else 
  sudo /usr/sbin/sshd
  __sshd_status="enabled"
fi

__user=$DEVCON_USER
if [ "$DEVCON_DISPLAY_PASSWORD" = "true" ]; then
    __user=$DEVCON_USER:$USER_PASSWORD
fi

#write startup info file
__startupInfoFile=.startup-info.txt
__now=$(date)
__hostname=$(hostname)
__release=$(cat /etc/rocky-release)
__build_time=$(cat ~/.build_time)
echo "Welcome, friend!" > $__startupInfoFile
echo "" >> $__startupInfoFile
echo "Start time: $__now" >> $__startupInfoFile
echo "Build time: $__build_time" >> $__startupInfoFile
echo "OS release: $__release"  >> $__startupInfoFile
echo "Host name : $__hostname" >> $__startupInfoFile
echo "SSHD      : $__sshd_status" >> $__startupInfoFile
echo "User      : $__user" >> $__startupInfoFile
echo "" >> $__startupInfoFile
echo "Use 'devcon-tool' to install additional packages." >> $__startupInfoFile
echo "" >> $__startupInfoFile

__start_command="-c tmux"
if [ "$DEVCON_START_TMUX" = "false" ]; then
  #if sshd is disabled start shell always
  #because wetty uses ssh
  __start_command=""
  #print startup info only if tmux is not started
  cat $__startupInfoFile
fi 

function createCertificate
{
  echo "Creating new certificate for WeTTY..."
  cdir=$(pwd)
  cd /setup/certificate-authority
  sudo sh create-certificate.sh -c "DevCon WeTTY" -I "127.0.0.1 $DEVCON_IP_SAN" wetty localhost devcon $DEVCON_DNS_SAN
  sudo mv certificate.crt ~/.ssl/wetty.crt
  sudo mv certificate.key ~/.ssl/wetty.key
  sudo chmod 700 ~/.ssl
  sudo chmod 644 ~/.ssl/wetty.crt
  sudo chmod 600 ~/.ssl/wetty.key
  sudo chown -R $DEVCON_USER:$DEVCON_USER ~/.ssl/
  cd $cdir
  echo "Creating new certificate for WeTTY...done."
  echo ""

}

#if custom SAN, then create certificate for WeTTY
if [[ -v DEVCON_DNS_SAN ]] || [[ -v DEVCON_IP_SAN ]]; then
  createCertificate
fi

if [ "$DEVCON_START_WETTY" = "true" ]; then
    echo "Starting WeTTY on port 3000..."
    source /etc/profile
    pid1 wetty --log-level info --host 0.0.0.0 --port 3000 --title WeTTY --base / --ssl-key ~/.ssl/wetty.key --ssl-cert ~/.ssl/wetty.crt
else 
    #exec /bin/bash -l
    #su -l $DEVCON_USER
    exec /bin/bash -l $__start_command
fi
